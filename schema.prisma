generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id        String    @id @unique @default(cuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      String    @default("employee")
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Request   Request[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Brand {
  id        String   @id @unique @default(cuid())
  name      String
  slug      String   @unique
  image     String?
  detail    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Product {
  id        String   @id @unique @default(cuid())
  name      String
  slug      String   @unique
  image     String?
  detail    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Item {
  id           String         @id @unique @default(cuid())
  name         String         @unique
  image        String?
  detail       String?
  quantity     Int            @default(0)
  isSerialized Boolean        @default(false)
  productSlug  String
  Product      Product        @relation(fields: [productSlug], references: [slug], onDelete: Cascade)
  brandSlug    String
  Brand        Brand          @relation(fields: [brandSlug], references: [slug], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SerialNumber SerialNumber[]
  EntryItem    EntryItem[]
  ConsumeItem  ConsumeItem[]
  RequestItem  RequestItem[]
}

model SerialNumber {
  id            String       @id @unique @default(cuid())
  number        String       @unique
  itemId        String
  Item          Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  status        String       @default("pending")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  EntryItem     EntryItem?   @relation(fields: [entryItemId], references: [id])
  entryItemId   String?
  ConsumeItem   ConsumeItem? @relation(fields: [consumeItemId], references: [id])
  consumeItemId String?
}

model Entry {
  id        String      @id @unique @default(cuid())
  reason    String
  status    String      @default("pending")
  detail    String?
  image     String?
  csvFile   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  EntryItem EntryItem[]
}

model EntryItem {
  id           String         @id @default(uuid())
  Entry        Entry          @relation(fields: [entryId], references: [id], onDelete: Cascade)
  entryId      String
  Item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       String
  quantity     Int?
  SerialNumber SerialNumber[]
}

model Consume {
  id          String        @id @unique @default(cuid())
  number      String        @default("No Number")
  destination String        @default("No Destination")
  reason      String
  status      String        @default("pending")
  detail      String?
  image       String?
  csvFile     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ConsumeItem ConsumeItem[]
}

model ConsumeItem {
  id           String         @id @default(uuid())
  Consume      Consume        @relation(fields: [consumeId], references: [id], onDelete: Cascade)
  consumeId    String
  Item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       String
  quantity     Int?
  SerialNumber SerialNumber[]
}

model Request {
  id          String        @id @unique @default(cuid())
  username    String
  User        User          @relation(fields: [username], references: [username], onDelete: Cascade)
  reason      String
  status      String        @default("pending")
  detail      String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  RequestItem RequestItem[]
}

model RequestItem {
  id        String  @id @default(uuid())
  Request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String
  Item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  quantity  Int     @default(0)
  status    String  @default("pending")
}
